library(lidR)
library(happign)
library(sf)
library(tmap); tmap_mode("view") # Set map to interactive
library(dplyr)
library(ggplot2);sf_use_s2(FALSE) # Avoid problem with spherical geometry
library(purrr)
library(stars)
library(terra)
library(jsonlite)

test = fromJSON(txt = "https://data.geopf.fr/private/wfs/?service=WFS&version=2.0.0&apikey=interface_catalogue&request=GetFeature&typeNames=IGNF_LIDAR-HD_TA:nuage-dalle&outputFormat=application/json&bbox=766276,6353692.630280115,769016.9951275728,6355112.417896504")
lien = test[["features"]][["properties"]][["url"]][1]

download.lidar = function(x1,y1,x2,y2){
  x = seq(x1,x2,1000)
  y = seq(y1,y2,1000)
for (i in x){
  for (j in y){
    json = fromJSON(txt = paste0("https://data.geopf.fr/private/wfs/?service=WFS&version=2.0.0&apikey=interface_catalogue&request=GetFeature&typeNames=IGNF_LIDAR-HD_TA:nuage-dalle&outputFormat=application/json&bbox=",i,",",j,",",i,",",j))
    lien = json[["features"]][["properties"]][["url"]][1]
    try({download.file(lien,
                       destfile = paste0("C:/Users/mathi/Desktop/",i,"_",j,".laz"))
      })
  }
}
}



borders <- read_sf("C:/Users/mathi/Desktop/projet troyes/cadastre_foret.gpkg")
layers <- get_layers_metadata("wms-r", "altimetrie")
mnt_layer <- layers[3,1] # "ELEVATION.ELEVATIONGRIDCOVERAGE.HIGHRES"
mns_layer <- layers[4,1] # "ELEVATION.ELEVATIONGRIDCOVERAGE.HIGHRES.MNS"

mnt <- get_wms_raster(borders, mnt_layer, res = 5, crs = 2154, rgb = FALSE)
mns <- get_wms_raster(borders, mns_layer, res = 5, crs = 2154, rgb = FALSE)

level_curve <- get_wfs(borders, "ELEVATION.CONTOUR.LINE:courbe",
                       spatial_filter = "intersects") |> 
  st_intersection(borders)

# Calculate digital height model i.e. tree height
mnh <- mns - mnt
mnh[mnh < 0] <- NA  # Remove negative value 
mnh[mnh > 50] <- 40 # Remove height more than 50m
plot(mnh)
plot(mnt)
plot(mns)

las <- readLAS("C:/Users/mathi/Downloads/LHD_FXX_0638_6971_PTS_C_LAMB93_IGN69.copc.laz")
plot(las)
clip_bb = st_bbox(las)-500
clip_las = clip_roi(las, clip_bb)
plot(clip_las, color="Classification")
# Khosravipour et al. pitfree algorithm
thr <- c(0,2,5,10,2000)
edg <- c(0, 1.5)
chm <- rasterize_canopy(las, 1, pitfree(thr, edg))
sol <- rasterize_terrain(las, 1, tin())
plot(chm)
plot(sol)
plot(chm-sol)
